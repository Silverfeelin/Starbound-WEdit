{
  "global": {
    "type": "table",
    "fields": {
      "Circle": {
        "type": "table",
        "fields": {
          "create": {
            "type": "function",
            "args": [{"name": "self"}, {"name": "a"}],
            "argsDisplay": "self[, a]",
            "argsDisplayOmitSelf": "[a]"
          }
        }
      },
      "wedit": {
        "type": "table",
        "description": "Core WEdit functions. This is out of date.",
        "fields": {
          "shapes": {
            "type": "table",
            "description": "Contains iterators for various shapes",
            "fields": {
              "circle": {
                "type": "function",
                "args": [{ "name": "position", "type": "Vec2" }, { "name": "radius", "type": "number" }, { "name": "callback", "type": "function" }]
              },
              "box": {
                "type": "function",
                "args": [{ "name": "position", "type": "Vec2" }, { "name": "width", "type": "number" }, { "name": "height", "type": "number" }, { "name": "callback", "type": "function" }]
              },
              "rectangle": {
                "type": "function",
                "args": [{ "name": "position", "type": "Vec2" }, { "name": "width", "type": "number" }, { "name": "height", "type": "number" }, { "name": "callback", "type": "function" }]
              },
              "bresenham": {
                "type": "function",
                "description": "For each block in a line between two points, calls the callback function.\n\nThis uses the bresenham algorithm implementation by **kikito**, licensed under the [MIT license](https://github.com/kikito/bresenham.lua/blob/master/MIT-LICENSE.txt).",
                "link": "https://github.com/kikito/bresenham.lua",
                "args": [{ "name": "startPos", "type": "Vec2" }, { "name": "endPos", "type": "Vec2" }, { "name": "callback", "type": "function "}]
              }
            }
          },
          "breakBlocks": {
            "type": "function",
            "description": "Breaks all blocks in a rectangular selection.\n\nReturns a copy of the area before any blocks are modified.",
            "args": [{ "name": "startPos" }, { "name": "endPos" }, { "name": "layer"}]
          },
          "copy": {
            "type": "function",
            "description": "Creates a copy of the rectangular selection. The optional `copyOptions` table defines what parts should be copied, with all being true by default (E.g. copyOptions.foreground = true). If given, any missing option will be automatically determined by the copy.\n\nAvailable options: `foreground`, `foregroundMods`, `background`, `backgroundMods`, `liquids`, `objects`, `containerLoot`.\n\nIf `logMaterials` is true, the total objects and blocks copied are logged.",
            "args": [{ "name": "bottomLeft" }, { "name": "topRight" }, { "name": "copyOptions" }, { "name": "logMaterials" }],
            "argsDisplay": "bottomLeft, topRight[, copyOptions[, logMaterials]]"
          },
          "drain": {
            "type": "function",
            "description": "Drains any liquid from the rectangular selection. Both positions are included in this rectangle.",
            "args": [{ "name": "bottomLeft" }, { "name": "topRight" }]
          },
          "fillBlocks": {
            "type": "function",
            "description": "Fills all air blocks in a rectangular selection. The operation will take time to complete.\n\nReturns a copy of the area before any blocks are modified.",
            "args": [{ "name": "bottomLeft" }, { "name": "topRight"}, { "name": "layer"}, { "name": "block"}]
          },
          "flip": {
            "type": "function",
            "description": "Starts a flip operation. The operation will take time to complete. Direction can be `horizontal` or `vertical`. Vertically flipping can cause issues with objects and matmods. See `stamp.copy`.\n\nNote that the given copy is directly modified!",
            "args": [{ "name": "copy" }, { "name": "direction" }]
          },
          "hydrate": {
            "type": "function",
            "description": "Fills a rectangular selection with a liquid. Both positions are included in this rectangle.",
            "args": [{ "name": "bottomLeft" }, { "name": "topRight" }, { "name": "liquidId"}]
          },
          "logENV": {
            "type": "function",
            "description": "Dumps the _ENV values and table subvalues. Can't have enough of these at hand."
          },
          "paste": {
            "type": "function",
            "description": "Starts a paste operation. The operation will take time to complete. See `stamp.copy`.\n\nReturns a copy of the area before any blocks are modified.",
            "args": [{ "name": "copy" }, { "name": "position" }]
          },
          "pencil": {
            "type": "function",
            "description": "Draws, replaces or breaks a block.",
            "args": [{ "name": "pos" }, { "name": "layer" }, { "name": "block" }],
            "argsDisplay": "bottomLeft, topRight[, block]"
          },
          "placeMod": {
            "type": "function",
            "description": "Places a material mod at the given position and layer.",
            "args": [{ "name": "startPos" }, { "name": "endPos" }, { "name": "layer"}, { "name": "callback"}]
          },
          "removeMod": {
            "type": "function",
            "description": "Removes a material mod at the given position and layer.\n\nIf a mod is present in `wedit.breakMods` and must be broken to get rid of the mod, the mod is first replaced with grass.",
            "args": [{ "name": "startPos" }, { "name": "endPos" }, { "name": "layer"}, { "name": "callback"}]
          },
          "replace": {
            "type": "function",
            "description": "Starts a block replace operation. The operation will take time to complete. If a `fromBlock` is given, only replaces blocks of this type.\n\nReturns a copy of the area before any blocks are modified.",
            "args": [{ "name": "bottomLeft" }, { "name": "topRight" }, { "name": "layer"}, { "name": "toBlock"}, { "name": "fromBlock", "displayName": "[fromBlock]"}]
          }
        }
      }
    }
  }
}
